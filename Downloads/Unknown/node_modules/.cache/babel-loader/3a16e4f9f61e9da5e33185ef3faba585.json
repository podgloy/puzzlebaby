{"ast":null,"code":"import _objectSpread from \"/Users/godploy/Downloads/Unknown/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/godploy/Downloads/Unknown/src/App.js\";\n// import React from \"react\";\n// import { useState } from \"react\";\n// import { motion, AnimateSharedLayout } from \"framer-motion\";\n// import { useViewportWidth } from \"./use-viewport-width\";\n// import \"./styles.css\";\n\n// /**\n//  * NOTICE: This won't work in later versions of Framer Motion. The\n//  * shared drag gesture was never widely used. But we may add it back\n//  * some time in the future.\n//  *\n//  * This is an example of a shared drag gesture in Framer Motion 2.\n//  *\n//  * When the box is dragged from one half to the other, it gets\n//  * removed from one component and added in the other. This isn't\n//  * the same box - it is two seperate components that share a layoutId.\n//  */\n\n// export default function App() {\n//   const viewportWidth = useViewportWidth();\n//   const [activeHalf, setActiveHalf] = useState(\"a\");\n\n//   const [pieces, setPieces] = useState(createGrid());\n// const [completed, setCompleted] = useState([]);\n// const NUM_ROWS = 3; // จำนวนแถว\n// const NUM_COLS = 4; // จำนวนคอลัมน์\n// const createGrid = () =>\n//   Array.from({ length: NUM_ROWS * NUM_COLS }, (_, index) => ({\n//     id: index,\n//     x: (index % NUM_COLS) * 100, // คำนวณตำแหน่งแนวนอน\n//     y: Math.floor(index / NUM_COLS) * 100, // คำนวณตำแหน่งแนวตั้ง\n//   }));\n//   const handleDragEnd = (event, info, piece) => {\n//     const target = pieces.find((p) => p.id === piece.id);\n\n//     // ตรวจสอบว่าชิ้นอยู่ใกล้ตำแหน่งเป้าหมายหรือไม่\n//     if (\n//       Math.abs(info.point.x - target.x) < 50 &&\n//       Math.abs(info.point.y - target.y) < 50\n//     ) {\n//       setCompleted((prev) => [...prev, piece.id]); // เพิ่ม ID ที่เสร็จแล้วใน completed\n//     } else {\n//       // ถ้าไม่ถูก ให้คืนชิ้นไปตำแหน่งเดิม\n//       setPieces((prev) =>\n//         prev.map((p) => (p.id === piece.id ? { ...p } : p))\n//       );\n//     }\n//   };\n\n//   const onViewportBoxUpdate = ({ x }) => {\n//     const halfViewport = viewportWidth.current / 2;\n\n//     if (activeHalf === \"a\" && x.min > halfViewport) {\n//       setActiveHalf(\"b\");\n//     } else if (activeHalf === \"b\" && x.max < halfViewport) {\n//       setActiveHalf(\"a\");\n//     }\n//   };\n\n//   return (\n//     <AnimateSharedLayout>\n//       <div className=\"container\">\n//         <Zone\n//           color=\"#f107a3\"\n//           isSelected={activeHalf === \"a\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//         <Zone\n//           color=\"#7b2ff7\"\n//           isSelected={activeHalf === \"b\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//       </div>\n//     </AnimateSharedLayout>\n//   );\n// }\n\n// function Zone({ color, isSelected, onViewportBoxUpdate }) {\n//   return (\n//     <div className=\"half-container\">\n//       {/* <motion.div className=\"overlay\" />\n//       {isSelected && (\n//         <motion.div\n//           className=\"box\"\n//           layoutId=\"box\"\n//           initial={false}\n//           animate={{ backgroundColor: color }}\n//           drag\n//           // Snap the box back to its center when we let go\n//           dragConstraints={{ top: 0, left: 0, right: 0, bottom: 0 }}\n//           // Allow full movememnt outside constraints\n//           dragElastic={1}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         /> */}\n//         {pieces.map(\n//   (piece) =>\n//     !completed.includes(piece.id) && (\n//       <motion.div\n//         key={piece.id}\n//         className=\"piece\"\n//         style={{\n//           backgroundImage: \"url('/path-to-your-puzzle-image.jpg')\",\n//           backgroundSize: `${NUM_COLS * 100}px ${NUM_ROWS * 100}px`, // ขนาดภาพเต็ม\n//           backgroundPosition: `-${piece.x}px -${piece.y}px`, // ตำแหน่งของชิ้น\n//         }}\n//         drag\n//         dragElastic={0.5}\n//         initial={{ x: piece.x, y: piece.y }}\n//         onDragEnd={(event, info) => handleDragEnd(event, info, piece)}\n//       >\n//         {/* ไม่ต้องมีข้อความ */}\n//       </motion.div>\n//     )\n\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./styles.css\";\n\n// จำนวนแถวและคอลัมน์\nconst NUM_ROWS = 3;\nconst NUM_COLS = 4;\n\n// ฟังก์ชันสร้าง Grid\nconst createGrid = () => Array.from({\n  length: NUM_ROWS * NUM_COLS\n}, (_, index) => ({\n  id: index,\n  x: index % NUM_COLS * 100,\n  y: Math.floor(index / NUM_COLS) * 100\n}));\nexport default function App() {\n  const [pieces, setPieces] = useState(createGrid());\n  const [completed, setCompleted] = useState([]);\n  const handleDragEnd = (event, info, piece) => {\n    const target = pieces.find(p => p.id === piece.id);\n    if (Math.abs(info.point.x - target.x) < 50 && Math.abs(info.point.y - target.y) < 50) {\n      setCompleted(prev => [...prev, piece.id]);\n    } else {\n      setPieces(prev => prev.map(p => p.id === piece.id ? _objectSpread({}, p) : p));\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, pieces.map(piece => /*#__PURE__*/React.createElement(\"div\", {\n    key: piece.id,\n    className: \"target\",\n    style: {\n      left: piece.x,\n      top: piece.y\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  })), pieces.map(piece => !completed.includes(piece.id) && /*#__PURE__*/React.createElement(motion.div, {\n    key: piece.id,\n    className: \"piece\",\n    style: {\n      backgroundImage: \"url('/path-to-your-puzzle-image.jpg')\",\n      // รูปเต็มของจิ๊กซอว์\n      backgroundSize: \"\".concat(NUM_COLS * 100, \"px \").concat(NUM_ROWS * 100, \"px\"),\n      // ขนาดของรูปภาพเต็ม (400x300px สำหรับ 3x4)\n      backgroundPosition: \"-\".concat(piece.x, \"px -\").concat(piece.y, \"px\"),\n      // ตำแหน่งของแต่ละชิ้น\n      width: \"100px\",\n      // ขนาดชิ้นจิ๊กซอว์\n      height: \"100px\"\n    },\n    drag: true,\n    dragElastic: 0.5,\n    initial: {\n      x: piece.x,\n      y: piece.y\n    },\n    onDragEnd: (event, info) => handleDragEnd(event, info, piece),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","motion","NUM_ROWS","NUM_COLS","createGrid","Array","from","length","_","index","id","x","y","Math","floor","App","pieces","setPieces","completed","setCompleted","handleDragEnd","event","info","piece","target","find","p","abs","point","prev","map","_objectSpread","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","style","left","top","includes","div","backgroundImage","backgroundSize","concat","backgroundPosition","width","height","drag","dragElastic","initial","onDragEnd"],"sources":["/Users/godploy/Downloads/Unknown/src/App.js"],"sourcesContent":["// import React from \"react\";\n// import { useState } from \"react\";\n// import { motion, AnimateSharedLayout } from \"framer-motion\";\n// import { useViewportWidth } from \"./use-viewport-width\";\n// import \"./styles.css\";\n\n// /**\n//  * NOTICE: This won't work in later versions of Framer Motion. The\n//  * shared drag gesture was never widely used. But we may add it back\n//  * some time in the future.\n//  *\n//  * This is an example of a shared drag gesture in Framer Motion 2.\n//  *\n//  * When the box is dragged from one half to the other, it gets\n//  * removed from one component and added in the other. This isn't\n//  * the same box - it is two seperate components that share a layoutId.\n//  */\n\n// export default function App() {\n//   const viewportWidth = useViewportWidth();\n//   const [activeHalf, setActiveHalf] = useState(\"a\");\n\n//   const [pieces, setPieces] = useState(createGrid());\n// const [completed, setCompleted] = useState([]);\n// const NUM_ROWS = 3; // จำนวนแถว\n// const NUM_COLS = 4; // จำนวนคอลัมน์\n// const createGrid = () =>\n//   Array.from({ length: NUM_ROWS * NUM_COLS }, (_, index) => ({\n//     id: index,\n//     x: (index % NUM_COLS) * 100, // คำนวณตำแหน่งแนวนอน\n//     y: Math.floor(index / NUM_COLS) * 100, // คำนวณตำแหน่งแนวตั้ง\n//   }));\n//   const handleDragEnd = (event, info, piece) => {\n//     const target = pieces.find((p) => p.id === piece.id);\n  \n//     // ตรวจสอบว่าชิ้นอยู่ใกล้ตำแหน่งเป้าหมายหรือไม่\n//     if (\n//       Math.abs(info.point.x - target.x) < 50 &&\n//       Math.abs(info.point.y - target.y) < 50\n//     ) {\n//       setCompleted((prev) => [...prev, piece.id]); // เพิ่ม ID ที่เสร็จแล้วใน completed\n//     } else {\n//       // ถ้าไม่ถูก ให้คืนชิ้นไปตำแหน่งเดิม\n//       setPieces((prev) =>\n//         prev.map((p) => (p.id === piece.id ? { ...p } : p))\n//       );\n//     }\n//   };\n  \n\n\n\n//   const onViewportBoxUpdate = ({ x }) => {\n//     const halfViewport = viewportWidth.current / 2;\n\n//     if (activeHalf === \"a\" && x.min > halfViewport) {\n//       setActiveHalf(\"b\");\n//     } else if (activeHalf === \"b\" && x.max < halfViewport) {\n//       setActiveHalf(\"a\");\n//     }\n//   };\n\n//   return (\n//     <AnimateSharedLayout>\n//       <div className=\"container\">\n//         <Zone\n//           color=\"#f107a3\"\n//           isSelected={activeHalf === \"a\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//         <Zone\n//           color=\"#7b2ff7\"\n//           isSelected={activeHalf === \"b\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//       </div>\n//     </AnimateSharedLayout>\n//   );\n// }\n\n// function Zone({ color, isSelected, onViewportBoxUpdate }) {\n//   return (\n//     <div className=\"half-container\">\n//       {/* <motion.div className=\"overlay\" />\n//       {isSelected && (\n//         <motion.div\n//           className=\"box\"\n//           layoutId=\"box\"\n//           initial={false}\n//           animate={{ backgroundColor: color }}\n//           drag\n//           // Snap the box back to its center when we let go\n//           dragConstraints={{ top: 0, left: 0, right: 0, bottom: 0 }}\n//           // Allow full movememnt outside constraints\n//           dragElastic={1}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         /> */}\n//         {pieces.map(\n//   (piece) =>\n//     !completed.includes(piece.id) && (\n//       <motion.div\n//         key={piece.id}\n//         className=\"piece\"\n//         style={{\n//           backgroundImage: \"url('/path-to-your-puzzle-image.jpg')\",\n//           backgroundSize: `${NUM_COLS * 100}px ${NUM_ROWS * 100}px`, // ขนาดภาพเต็ม\n//           backgroundPosition: `-${piece.x}px -${piece.y}px`, // ตำแหน่งของชิ้น\n//         }}\n//         drag\n//         dragElastic={0.5}\n//         initial={{ x: piece.x, y: piece.y }}\n//         onDragEnd={(event, info) => handleDragEnd(event, info, piece)}\n//       >\n//         {/* ไม่ต้องมีข้อความ */}\n//       </motion.div>\n//     )\n\n//       )}\n//     </div>\n//   );\n// }\n\n\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./styles.css\";\n\n// จำนวนแถวและคอลัมน์\nconst NUM_ROWS = 3;\nconst NUM_COLS = 4;\n\n// ฟังก์ชันสร้าง Grid\nconst createGrid = () =>\n  Array.from({ length: NUM_ROWS * NUM_COLS }, (_, index) => ({\n    id: index,\n    x: (index % NUM_COLS) * 100,\n    y: Math.floor(index / NUM_COLS) * 100,\n  }));\n\nexport default function App() {\n  const [pieces, setPieces] = useState(createGrid());\n  const [completed, setCompleted] = useState([]);\n\n  const handleDragEnd = (event, info, piece) => {\n    const target = pieces.find((p) => p.id === piece.id);\n\n    if (\n      Math.abs(info.point.x - target.x) < 50 &&\n      Math.abs(info.point.y - target.y) < 50\n    ) {\n      setCompleted((prev) => [...prev, piece.id]);\n    } else {\n      setPieces((prev) =>\n        prev.map((p) => (p.id === piece.id ? { ...p } : p))\n      );\n    }\n  };\n\n  return (\n    <div className=\"board\">\n      {/* กระดานเป้าหมาย */}\n      {pieces.map((piece) => (\n        <div\n          key={piece.id}\n          className=\"target\"\n          style={{\n            left: piece.x,\n            top: piece.y,\n          }}\n        />\n      ))}\n\n      {/* ชิ้นจิ๊กซอว์ */}\n      {pieces.map(\n  (piece) =>\n    !completed.includes(piece.id) && (\n      <motion.div\n        key={piece.id}\n        className=\"piece\"\n        style={{\n          backgroundImage: \"url('/path-to-your-puzzle-image.jpg')\", // รูปเต็มของจิ๊กซอว์\n          backgroundSize: `${NUM_COLS * 100}px ${NUM_ROWS * 100}px`, // ขนาดของรูปภาพเต็ม (400x300px สำหรับ 3x4)\n          backgroundPosition: `-${piece.x}px -${piece.y}px`, // ตำแหน่งของแต่ละชิ้น\n          width: \"100px\", // ขนาดชิ้นจิ๊กซอว์\n          height: \"100px\",\n        }}\n        drag\n        dragElastic={0.5}\n        initial={{ x: piece.x, y: piece.y }}\n        onDragEnd={(event, info) => handleDragEnd(event, info, piece)}\n      />\n    )\n)}\n\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAO,cAAc;;AAErB;AACA,MAAMC,QAAQ,GAAG,CAAC;AAClB,MAAMC,QAAQ,GAAG,CAAC;;AAElB;AACA,MAAMC,UAAU,GAAGA,CAAA,KACjBC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAEL,QAAQ,GAAGC;AAAS,CAAC,EAAE,CAACK,CAAC,EAAEC,KAAK,MAAM;EACzDC,EAAE,EAAED,KAAK;EACTE,CAAC,EAAGF,KAAK,GAAGN,QAAQ,GAAI,GAAG;EAC3BS,CAAC,EAAEC,IAAI,CAACC,KAAK,CAACL,KAAK,GAAGN,QAAQ,CAAC,GAAG;AACpC,CAAC,CAAC,CAAC;AAEL,eAAe,SAASY,GAAGA,CAAA,EAAG;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;EAClD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMoB,aAAa,GAAGA,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,KAAK;IAC5C,MAAMC,MAAM,GAAGR,MAAM,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAChB,EAAE,KAAKa,KAAK,CAACb,EAAE,CAAC;IAEpD,IACEG,IAAI,CAACc,GAAG,CAACL,IAAI,CAACM,KAAK,CAACjB,CAAC,GAAGa,MAAM,CAACb,CAAC,CAAC,GAAG,EAAE,IACtCE,IAAI,CAACc,GAAG,CAACL,IAAI,CAACM,KAAK,CAAChB,CAAC,GAAGY,MAAM,CAACZ,CAAC,CAAC,GAAG,EAAE,EACtC;MACAO,YAAY,CAAEU,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEN,KAAK,CAACb,EAAE,CAAC,CAAC;IAC7C,CAAC,MAAM;MACLO,SAAS,CAAEY,IAAI,IACbA,IAAI,CAACC,GAAG,CAAEJ,CAAC,IAAMA,CAAC,CAAChB,EAAE,KAAKa,KAAK,CAACb,EAAE,GAAAqB,aAAA,KAAQL,CAAC,IAAKA,CAAE,CACpD,CAAC;IACH;EACF,CAAC;EAED,oBACE3B,KAAA,CAAAiC,aAAA;IAAKC,SAAS,EAAC,OAAO;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEnBvB,MAAM,CAACc,GAAG,CAAEP,KAAK,iBAChBxB,KAAA,CAAAiC,aAAA;IACEQ,GAAG,EAAEjB,KAAK,CAACb,EAAG;IACduB,SAAS,EAAC,QAAQ;IAClBQ,KAAK,EAAE;MACLC,IAAI,EAAEnB,KAAK,CAACZ,CAAC;MACbgC,GAAG,EAAEpB,KAAK,CAACX;IACb,CAAE;IAAAsB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACF,CAAC,EAGDvB,MAAM,CAACc,GAAG,CACdP,KAAK,IACJ,CAACL,SAAS,CAAC0B,QAAQ,CAACrB,KAAK,CAACb,EAAE,CAAC,iBAC3BX,KAAA,CAAAiC,aAAA,CAAC/B,MAAM,CAAC4C,GAAG;IACTL,GAAG,EAAEjB,KAAK,CAACb,EAAG;IACduB,SAAS,EAAC,OAAO;IACjBQ,KAAK,EAAE;MACLK,eAAe,EAAE,uCAAuC;MAAE;MAC1DC,cAAc,KAAAC,MAAA,CAAK7C,QAAQ,GAAG,GAAG,SAAA6C,MAAA,CAAM9C,QAAQ,GAAG,GAAG,OAAI;MAAE;MAC3D+C,kBAAkB,MAAAD,MAAA,CAAMzB,KAAK,CAACZ,CAAC,UAAAqC,MAAA,CAAOzB,KAAK,CAACX,CAAC,OAAI;MAAE;MACnDsC,KAAK,EAAE,OAAO;MAAE;MAChBC,MAAM,EAAE;IACV,CAAE;IACFC,IAAI;IACJC,WAAW,EAAE,GAAI;IACjBC,OAAO,EAAE;MAAE3C,CAAC,EAAEY,KAAK,CAACZ,CAAC;MAAEC,CAAC,EAAEW,KAAK,CAACX;IAAE,CAAE;IACpC2C,SAAS,EAAEA,CAAClC,KAAK,EAAEC,IAAI,KAAKF,aAAa,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAE;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC/D,CAEP,CAES,CAAC;AAEV","ignoreList":[]},"metadata":{},"sourceType":"module"}