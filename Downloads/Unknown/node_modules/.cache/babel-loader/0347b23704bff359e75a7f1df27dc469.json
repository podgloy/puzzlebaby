{"ast":null,"code":"var _jsxFileName = \"/Users/godploy/Downloads/Unknown/src/App.js\";\n// import React from \"react\";\n// import { useState } from \"react\";\n// import { motion, AnimateSharedLayout } from \"framer-motion\";\n// import { useViewportWidth } from \"./use-viewport-width\";\n// import \"./styles.css\";\n\n// /**\n//  * NOTICE: This won't work in later versions of Framer Motion. The\n//  * shared drag gesture was never widely used. But we may add it back\n//  * some time in the future.\n//  *\n//  * This is an example of a shared drag gesture in Framer Motion 2.\n//  *\n//  * When the box is dragged from one half to the other, it gets\n//  * removed from one component and added in the other. This isn't\n//  * the same box - it is two seperate components that share a layoutId.\n//  */\n\n// export default function App() {\n//   const viewportWidth = useViewportWidth();\n//   const [activeHalf, setActiveHalf] = useState(\"a\");\n\n//   const [pieces, setPieces] = useState(createGrid());\n// const [completed, setCompleted] = useState([]);\n// const NUM_ROWS = 3; // จำนวนแถว\n// const NUM_COLS = 4; // จำนวนคอลัมน์\n// const createGrid = () =>\n//   Array.from({ length: NUM_ROWS * NUM_COLS }, (_, index) => ({\n//     id: index,\n//     x: (index % NUM_COLS) * 100, // คำนวณตำแหน่งแนวนอน\n//     y: Math.floor(index / NUM_COLS) * 100, // คำนวณตำแหน่งแนวตั้ง\n//   }));\n//   const handleDragEnd = (event, info, piece) => {\n//     const target = pieces.find((p) => p.id === piece.id);\n\n//     // ตรวจสอบว่าชิ้นอยู่ใกล้ตำแหน่งเป้าหมายหรือไม่\n//     if (\n//       Math.abs(info.point.x - target.x) < 50 &&\n//       Math.abs(info.point.y - target.y) < 50\n//     ) {\n//       setCompleted((prev) => [...prev, piece.id]); // เพิ่ม ID ที่เสร็จแล้วใน completed\n//     } else {\n//       // ถ้าไม่ถูก ให้คืนชิ้นไปตำแหน่งเดิม\n//       setPieces((prev) =>\n//         prev.map((p) => (p.id === piece.id ? { ...p } : p))\n//       );\n//     }\n//   };\n\n//   const onViewportBoxUpdate = ({ x }) => {\n//     const halfViewport = viewportWidth.current / 2;\n\n//     if (activeHalf === \"a\" && x.min > halfViewport) {\n//       setActiveHalf(\"b\");\n//     } else if (activeHalf === \"b\" && x.max < halfViewport) {\n//       setActiveHalf(\"a\");\n//     }\n//   };\n\n//   return (\n//     <AnimateSharedLayout>\n//       <div className=\"container\">\n//         <Zone\n//           color=\"#f107a3\"\n//           isSelected={activeHalf === \"a\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//         <Zone\n//           color=\"#7b2ff7\"\n//           isSelected={activeHalf === \"b\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//       </div>\n//     </AnimateSharedLayout>\n//   );\n// }\n\n// function Zone({ color, isSelected, onViewportBoxUpdate }) {\n//   return (\n//     <div className=\"half-container\">\n//       {/* <motion.div className=\"overlay\" />\n//       {isSelected && (\n//         <motion.div\n//           className=\"box\"\n//           layoutId=\"box\"\n//           initial={false}\n//           animate={{ backgroundColor: color }}\n//           drag\n//           // Snap the box back to its center when we let go\n//           dragConstraints={{ top: 0, left: 0, right: 0, bottom: 0 }}\n//           // Allow full movememnt outside constraints\n//           dragElastic={1}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         /> */}\n//         {pieces.map(\n//   (piece) =>\n//     !completed.includes(piece.id) && (\n//       <motion.div\n//         key={piece.id}\n//         className=\"piece\"\n//         style={{\n//           backgroundImage: \"url('/path-to-your-puzzle-image.jpg')\",\n//           backgroundSize: `${NUM_COLS * 100}px ${NUM_ROWS * 100}px`, // ขนาดภาพเต็ม\n//           backgroundPosition: `-${piece.x}px -${piece.y}px`, // ตำแหน่งของชิ้น\n//         }}\n//         drag\n//         dragElastic={0.5}\n//         initial={{ x: piece.x, y: piece.y }}\n//         onDragEnd={(event, info) => handleDragEnd(event, info, piece)}\n//       >\n//         {/* ไม่ต้องมีข้อความ */}\n//       </motion.div>\n//     )\n\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./styles.css\";\nconst NUM_ROWS = 3; // จำนวนแถวของกรอบเป้าหมาย\nconst NUM_COLS = 4; // จำนวนคอลัมน์ของกรอบเป้าหมาย\n\nconst handleDragEnd = (event, info, piece) => {\n  const target = pieces.find(p => p.id === piece.id);\n\n  // ตรวจสอบว่าชิ้นถูกลากไปใกล้ตำแหน่งเป้าหมายหรือไม่\n  if (Math.abs(info.point.x - target.targetX) < 50 && Math.abs(info.point.y - target.targetY) < 50) {\n    setCompleted(prev => [...prev, piece.id]);\n  }\n};\nconst createGrid = () => Array.from({\n  length: NUM_ROWS * NUM_COLS\n}, (_, index) => ({\n  id: index,\n  targetX: index % NUM_COLS * 100,\n  // ตำแหน่ง X ของเป้าหมาย\n  targetY: Math.floor(index / NUM_COLS) * 100,\n  // ตำแหน่ง Y ของเป้าหมาย\n  initialX: 400 + Math.random() * 50,\n  // ตำแหน่งเริ่มต้น (มุมขวาล่าง)\n  initialY: 250 + Math.random() * 50,\n  image: \"/public/img/puzzle/puzzle\".concat(index + 1, \".svg\") // ใช้ไฟล์ .svg\n}));\nexport default function App() {\n  const [pieces, setPieces] = useState(createGrid());\n  const [completed, setCompleted] = useState([]);\n  const handleDragEnd = (event, info, piece) => {\n    const target = pieces.find(p => p.id === piece.id);\n\n    // ตรวจสอบว่าชิ้นถูกลากไปใกล้ตำแหน่งเป้าหมายหรือไม่\n    if (Math.abs(info.point.x - target.targetX) < 50 && Math.abs(info.point.y - target.targetY) < 50) {\n      setCompleted(prev => [...prev, piece.id]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, pieces.map(piece => /*#__PURE__*/React.createElement(\"div\", {\n    key: piece.id,\n    className: \"target\",\n    style: {\n      left: piece.targetX,\n      top: piece.targetY\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  })), pieces.map(piece => !completed.includes(piece.id) && /*#__PURE__*/React.createElement(motion.div, {\n    key: piece.id,\n    className: \"piece\",\n    style: {\n      backgroundImage: \"url(\".concat(piece.image, \")\"),\n      backgroundSize: \"100px 100px\",\n      width: \"100px\",\n      height: \"100px\"\n    },\n    drag: true,\n    dragElastic: 0.5,\n    initial: {\n      x: piece.initialX,\n      y: piece.initialY\n    },\n    animate: completed.includes(piece.id) ? {\n      x: piece.targetX,\n      y: piece.targetY\n    } : undefined,\n    onDragEnd: (event, info) => handleDragEnd(event, info, piece),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","motion","NUM_ROWS","NUM_COLS","handleDragEnd","event","info","piece","target","pieces","find","p","id","Math","abs","point","x","targetX","y","targetY","setCompleted","prev","createGrid","Array","from","length","_","index","floor","initialX","random","initialY","image","concat","App","setPieces","completed","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","style","left","top","includes","div","backgroundImage","backgroundSize","width","height","drag","dragElastic","initial","animate","undefined","onDragEnd"],"sources":["/Users/godploy/Downloads/Unknown/src/App.js"],"sourcesContent":["// import React from \"react\";\n// import { useState } from \"react\";\n// import { motion, AnimateSharedLayout } from \"framer-motion\";\n// import { useViewportWidth } from \"./use-viewport-width\";\n// import \"./styles.css\";\n\n// /**\n//  * NOTICE: This won't work in later versions of Framer Motion. The\n//  * shared drag gesture was never widely used. But we may add it back\n//  * some time in the future.\n//  *\n//  * This is an example of a shared drag gesture in Framer Motion 2.\n//  *\n//  * When the box is dragged from one half to the other, it gets\n//  * removed from one component and added in the other. This isn't\n//  * the same box - it is two seperate components that share a layoutId.\n//  */\n\n// export default function App() {\n//   const viewportWidth = useViewportWidth();\n//   const [activeHalf, setActiveHalf] = useState(\"a\");\n\n//   const [pieces, setPieces] = useState(createGrid());\n// const [completed, setCompleted] = useState([]);\n// const NUM_ROWS = 3; // จำนวนแถว\n// const NUM_COLS = 4; // จำนวนคอลัมน์\n// const createGrid = () =>\n//   Array.from({ length: NUM_ROWS * NUM_COLS }, (_, index) => ({\n//     id: index,\n//     x: (index % NUM_COLS) * 100, // คำนวณตำแหน่งแนวนอน\n//     y: Math.floor(index / NUM_COLS) * 100, // คำนวณตำแหน่งแนวตั้ง\n//   }));\n//   const handleDragEnd = (event, info, piece) => {\n//     const target = pieces.find((p) => p.id === piece.id);\n  \n//     // ตรวจสอบว่าชิ้นอยู่ใกล้ตำแหน่งเป้าหมายหรือไม่\n//     if (\n//       Math.abs(info.point.x - target.x) < 50 &&\n//       Math.abs(info.point.y - target.y) < 50\n//     ) {\n//       setCompleted((prev) => [...prev, piece.id]); // เพิ่ม ID ที่เสร็จแล้วใน completed\n//     } else {\n//       // ถ้าไม่ถูก ให้คืนชิ้นไปตำแหน่งเดิม\n//       setPieces((prev) =>\n//         prev.map((p) => (p.id === piece.id ? { ...p } : p))\n//       );\n//     }\n//   };\n  \n\n\n\n//   const onViewportBoxUpdate = ({ x }) => {\n//     const halfViewport = viewportWidth.current / 2;\n\n//     if (activeHalf === \"a\" && x.min > halfViewport) {\n//       setActiveHalf(\"b\");\n//     } else if (activeHalf === \"b\" && x.max < halfViewport) {\n//       setActiveHalf(\"a\");\n//     }\n//   };\n\n//   return (\n//     <AnimateSharedLayout>\n//       <div className=\"container\">\n//         <Zone\n//           color=\"#f107a3\"\n//           isSelected={activeHalf === \"a\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//         <Zone\n//           color=\"#7b2ff7\"\n//           isSelected={activeHalf === \"b\"}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         />\n//       </div>\n//     </AnimateSharedLayout>\n//   );\n// }\n\n// function Zone({ color, isSelected, onViewportBoxUpdate }) {\n//   return (\n//     <div className=\"half-container\">\n//       {/* <motion.div className=\"overlay\" />\n//       {isSelected && (\n//         <motion.div\n//           className=\"box\"\n//           layoutId=\"box\"\n//           initial={false}\n//           animate={{ backgroundColor: color }}\n//           drag\n//           // Snap the box back to its center when we let go\n//           dragConstraints={{ top: 0, left: 0, right: 0, bottom: 0 }}\n//           // Allow full movememnt outside constraints\n//           dragElastic={1}\n//           onViewportBoxUpdate={onViewportBoxUpdate}\n//         /> */}\n//         {pieces.map(\n//   (piece) =>\n//     !completed.includes(piece.id) && (\n//       <motion.div\n//         key={piece.id}\n//         className=\"piece\"\n//         style={{\n//           backgroundImage: \"url('/path-to-your-puzzle-image.jpg')\",\n//           backgroundSize: `${NUM_COLS * 100}px ${NUM_ROWS * 100}px`, // ขนาดภาพเต็ม\n//           backgroundPosition: `-${piece.x}px -${piece.y}px`, // ตำแหน่งของชิ้น\n//         }}\n//         drag\n//         dragElastic={0.5}\n//         initial={{ x: piece.x, y: piece.y }}\n//         onDragEnd={(event, info) => handleDragEnd(event, info, piece)}\n//       >\n//         {/* ไม่ต้องมีข้อความ */}\n//       </motion.div>\n//     )\n\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport \"./styles.css\";\n\nconst NUM_ROWS = 3; // จำนวนแถวของกรอบเป้าหมาย\nconst NUM_COLS = 4; // จำนวนคอลัมน์ของกรอบเป้าหมาย\n\nconst handleDragEnd = (event, info, piece) => {\n  const target = pieces.find((p) => p.id === piece.id);\n\n  // ตรวจสอบว่าชิ้นถูกลากไปใกล้ตำแหน่งเป้าหมายหรือไม่\n  if (\n    Math.abs(info.point.x - target.targetX) < 50 &&\n    Math.abs(info.point.y - target.targetY) < 50\n  ) {\n    setCompleted((prev) => [...prev, piece.id]);\n  }\n};\n\n\nconst createGrid = () =>\n  Array.from({ length: NUM_ROWS * NUM_COLS }, (_, index) => ({\n    id: index,\n    targetX: (index % NUM_COLS) * 100, // ตำแหน่ง X ของเป้าหมาย\n    targetY: Math.floor(index / NUM_COLS) * 100, // ตำแหน่ง Y ของเป้าหมาย\n    initialX: 400 + Math.random() * 50, // ตำแหน่งเริ่มต้น (มุมขวาล่าง)\n    initialY: 250 + Math.random() * 50,\n    image: `/public/img/puzzle/puzzle${index + 1}.svg`, // ใช้ไฟล์ .svg\n  }));\n\nexport default function App() {\n  const [pieces, setPieces] = useState(createGrid());\n  const [completed, setCompleted] = useState([]);\n\n  const handleDragEnd = (event, info, piece) => {\n    const target = pieces.find((p) => p.id === piece.id);\n\n    // ตรวจสอบว่าชิ้นถูกลากไปใกล้ตำแหน่งเป้าหมายหรือไม่\n    if (\n      Math.abs(info.point.x - target.targetX) < 50 &&\n      Math.abs(info.point.y - target.targetY) < 50\n    ) {\n      setCompleted((prev) => [...prev, piece.id]);\n    }\n  };\n\n  return (\n    <div className=\"board\">\n      {/* กรอบเป้าหมาย */}\n      {pieces.map((piece) => (\n        <div\n          key={piece.id}\n          className=\"target\"\n          style={{\n            left: piece.targetX,\n            top: piece.targetY,\n          }}\n        />\n      ))}\n\n      {/* ชิ้นจิ๊กซอว์ */}\n      {pieces.map(\n        (piece) =>\n          !completed.includes(piece.id) && (\n            <motion.div\n              key={piece.id}\n              className=\"piece\"\n              style={{\n                backgroundImage: `url(${piece.image})`,\n                backgroundSize: \"100px 100px\",\n                width: \"100px\",\n                height: \"100px\",\n              }}\n              drag\n              dragElastic={0.5}\n              initial={{ x: piece.initialX, y: piece.initialY }}\n              animate={\n                completed.includes(piece.id)\n                  ? { x: piece.targetX, y: piece.targetY }\n                  : undefined\n              }\n              onDragEnd={(event, info) => handleDragEnd(event, info, piece)}\n            />\n          )\n      )}\n    </div>\n  );\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAO,cAAc;AAErB,MAAMC,QAAQ,GAAG,CAAC,CAAC,CAAC;AACpB,MAAMC,QAAQ,GAAG,CAAC,CAAC,CAAC;;AAEpB,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,KAAK;EAC5C,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKL,KAAK,CAACK,EAAE,CAAC;;EAEpD;EACA,IACEC,IAAI,CAACC,GAAG,CAACR,IAAI,CAACS,KAAK,CAACC,CAAC,GAAGR,MAAM,CAACS,OAAO,CAAC,GAAG,EAAE,IAC5CJ,IAAI,CAACC,GAAG,CAACR,IAAI,CAACS,KAAK,CAACG,CAAC,GAAGV,MAAM,CAACW,OAAO,CAAC,GAAG,EAAE,EAC5C;IACAC,YAAY,CAAEC,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEd,KAAK,CAACK,EAAE,CAAC,CAAC;EAC7C;AACF,CAAC;AAGD,MAAMU,UAAU,GAAGA,CAAA,KACjBC,K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","ignoreList":[]},"metadata":{},"sourceType":"module"}